/*
     File        : file_system.C

     Author      : Riccardo Bettati
     Modified    : 2017/05/01

     Description : Implementation of simple File System class.
                   Has support for numerical file identifiers.
 */

/*--------------------------------------------------------------------------*/
/* DEFINES */
/*--------------------------------------------------------------------------*/

    /* -- (none) -- */

/*--------------------------------------------------------------------------*/
/* INCLUDES */
/*--------------------------------------------------------------------------*/

#include "assert.H"
#include "console.H"
#include "file_system.H"

/*--------------------------------------------------------------------------*/
/* CONSTRUCTOR */
/*--------------------------------------------------------------------------*/

FileSystem::FileSystem() {
    Console::puts("This is a constructor of file system.\n");
   
        filesystem_disk = NULL;
        filesystem_size = 0;
        filesystem_free_block = 0;
        filesystem_total_files = 0;
        File::file_system = this;
}

/*--------------------------------------------------------------------------*/
/* FILE SYSTEM FUNCTIONS */
/*--------------------------------------------------------------------------*/

bool FileSystem::Mount(SimpleDisk * _disk) {
    Console::puts("This is mount of file system\n");
    

        //assign the disk   
        filesystem_disk = _disk;
        // initialize the disk buffer of 512 size
        unsigned char disk_buffer[512] = {0,};
        // read from the simple disk to filesystem disk
        filesystem_disk->read(0, disk_buffer);
        // copy size, free block, total files and file info from disk buffer to each variable

        memcpy(&filesystem_size, disk_buffer, 4);
        memcpy(&filesystem_free_block, disk_buffer+4, 4);
        memcpy(&filesystem_total_files, disk_buffer+8, 4);
        memcpy(filesystem_file_info, disk_buffer + FILESYSTEM_DATA_OFFSET, 3 * 4 * FILESYSTEM_MAXFILE);


        return true;

}

bool FileSystem::Format(SimpleDisk * _disk, unsigned int _size) {
    Console::puts("formatting disk\n");
    

    unsigned char disk_buffer[FILESYSTEM_BLOCK_SIZE] = {0,};
		
        //initialize the FS reserved blocks except the first block
        for(unsigned int block_number = 1; block_number < FILESYSTEM_BLOCK_LENGTH; block_number++) {
                _disk->write(block_number, disk_buffer);
        }

        //initialize the free blocks (except the last block) assuming _size is a multiple of FILESYSTEM_BLOCK_SIZE
        unsigned int block_number = FILESYSTEM_BLOCK_LENGTH;
        for(; block_number < _size / FILESYSTEM_BLOCK_SIZE - 1; block_number++) {
                unsigned int next_block = block_number +1;
                memcpy(disk_buffer + 508, &next_block, 4);
                _disk->write(block_number, disk_buffer);
        }

        //initialize the last block
        int last_block = -1;
        memcpy(disk_buffer + 508, &last_block, 4);
        _disk->write(block_number, disk_buffer);
		

        //initialize the first block
        unsigned int temp_size = _size;
        memcpy(disk_buffer+0, &temp_size, 4); 				//disk size
        temp_size = FILESYSTEM_BLOCK_LENGTH; 				//first free block
        memcpy(disk_buffer+4, &temp_size, 4);
        temp_size = 0; 								//number of files
        memcpy(disk_buffer+8, &temp_size, 4);
        memset(disk_buffer+12, 0, 500);				//File data -- necessary to format as file_id == 0 is considered as a hole for filling in file data
        _disk->write(0, disk_buffer);

return true;
}

bool FileSystem::CheckFile(int _file_id) {
   
      // check if given file id matches with any of the saved files in the file system

        for(unsigned int counter = 0; counter < FILESYSTEM_MAXFILE; counter++) {
                if(filesystem_file_info[counter][0] == _file_id) {
                        return true;
                }
        }
}


File * FileSystem::LookupFile(int _file_id) {
    Console::puts("This is from look up file\n");
    
    // check all the files in the file system and return in file is present
        File * temp_file ;    
        for(unsigned int counter = 0; counter < FILESYSTEM_MAXFILE; counter++) {
                if(filesystem_file_info[counter][0] == _file_id) {
                        temp_file->file_id = _file_id;
                        temp_file->size = filesystem_file_info[counter][1];
                        temp_file->start_block = filesystem_file_info[counter][2];
                        return temp_file;
                }
}


}

bool FileSystem::CreateFile(int _file_id) {
    Console::puts("creating file\n");
   

        unsigned char tempdisk_buffer[FILESYSTEM_BLOCK_SIZE];
        unsigned int counter;
         // Check if the file id is already taken or file is already present
        for(counter = 0; counter < FILESYSTEM_MAXFILE; counter++) { 
                if(filesystem_file_info[counter][0] == _file_id) 
                        return false;
        }
        // find a empty location to put give file
        for(counter = 0; counter < FILESYSTEM_MAXFILE; counter++) {
                if(filesystem_file_info[counter][0] == 0)
                        break;
        }

        filesystem_file_info[counter][0] = _file_id;
        // initialize size as zero
        filesystem_file_info[counter][1] = 0; 
        filesystem_file_info[counter][2] = 0;
        // increase the total number of files in the file system
        filesystem_total_files++;
return true; 

}

bool FileSystem::DeleteFile(int _file_id) {
    Console::puts("deleting file\n");
    
    unsigned int counter;

     // check the location of the file
        for(counter = 0; counter < FILESYSTEM_MAXFILE; counter++) {
                if(filesystem_file_info[counter][0] == _file_id)
                        break;
        }
     
     // if counter is equal filesystem maxfile then filesystem if full
     // return false in this case
        if(counter == FILESYSTEM_MAXFILE) return false;

     
        
        unsigned char tempdisk_buffer[FILESYSTEM_BLOCK_SIZE];

        
        unsigned int temp_block = filesystem_file_info[counter][2];
        unsigned int next_block = 0;
        while(true) {

                /* If done then break */
                if((int)temp_block == -1) {
                        break;
                }

                /* Read and copy */
                filesystem_disk->read(temp_block, tempdisk_buffer);
                memcpy(&next_block, tempdisk_buffer+508, 4);

                /* Copy and write */
                memcpy(tempdisk_buffer+508, &filesystem_free_block, 4);
                filesystem_disk->write(temp_block, tempdisk_buffer);
                
                filesystem_free_block = temp_block;
                temp_block = next_block;
        }

        /* empty the entries */
        filesystem_file_info[counter][0] = 0;
        filesystem_file_info[counter][1] = 0;
        filesystem_file_info[counter][2] = 0;

return true;
}
